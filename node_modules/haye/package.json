{
  "_args": [
    [
      {
        "raw": "haye@^1.0.1",
        "scope": null,
        "escapedName": "haye",
        "name": "haye",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/home/brenda/Proyecto_PedidosReservaciones/node_modules/adonis-websocket"
    ]
  ],
  "_from": "haye@>=1.0.1 <2.0.0",
  "_id": "haye@1.0.1",
  "_inCache": true,
  "_location": "/haye",
  "_nodeVersion": "6.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/haye-1.0.1.tgz_1475262339799_0.14010386704467237"
  },
  "_npmUser": {
    "name": "adonisjs",
    "email": "virk@adonisjs.com"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "haye@^1.0.1",
    "scope": null,
    "escapedName": "haye",
    "name": "haye",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/adonis-websocket"
  ],
  "_resolved": "https://registry.npmjs.org/haye/-/haye-1.0.1.tgz",
  "_shasum": "a661fcee2ee42975022a67e7d09003d5b23f89cc",
  "_shrinkwrap": null,
  "_spec": "haye@^1.0.1",
  "_where": "/home/brenda/Proyecto_PedidosReservaciones/node_modules/adonis-websocket",
  "author": {
    "name": "amanvirk,adonisjs"
  },
  "bugs": {
    "url": "https://github.com/poppinss/haye/issues"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    }
  },
  "dependencies": {
    "lodash": "^4.16.2"
  },
  "description": "Haye is an expressive string syntax to Array/Object and Vice-Versa parser for Javascript. Quite often you want your users to define some values using an expressive string expression instead of nesting values in an array or object.",
  "devDependencies": {
    "chai": "^3.5.0",
    "coveralls": "^2.11.14",
    "cz-conventional-changelog": "^1.2.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.1.0",
    "mocha-lcov-reporter": "^1.2.0",
    "standard": "^8.3.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "a661fcee2ee42975022a67e7d09003d5b23f89cc",
    "tarball": "https://registry.npmjs.org/haye/-/haye-1.0.1.tgz"
  },
  "gitHead": "5c469f90edc42ef198c7b308f2bba7582375fc28",
  "homepage": "https://github.com/poppinss/haye#readme",
  "keywords": [
    "string-parser",
    "indicative",
    "expression"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "adonisjs",
      "email": "virk@adonisjs.com"
    }
  ],
  "name": "haye",
  "optionalDependencies": {},
  "readme": "# Haye\n\n![](http://i1117.photobucket.com/albums/k594/thetutlage/poppins-1_zpsg867sqyl.png)\n\n[![Version](https://img.shields.io/npm/v/haye.svg?style=flat-square)](https://www.npmjs.com/package/haye)\n[![Build Status](https://img.shields.io/travis/poppinss/haye/master.svg?style=flat-square)](https://travis-ci.org/poppinss/haye)\n[![Coverage Status](https://img.shields.io/coveralls/poppinss/haye/master.svg?style=flat-square)](https://coveralls.io/github/poppinss/haye?branch=master)\n[![Downloads](https://img.shields.io/npm/dt/haye.svg?style=flat-square)](https://www.npmjs.com/package/haye)\n[![License](https://img.shields.io/npm/l/haye.svg?style=flat-square)](https://opensource.org/licenses/MIT)\n[![Support AdonisJs](https://img.shields.io/badge/support-adonisjs-brightgreen.svg?style=flat-square)](https://www.patreon.com/adonisframework)\n\nHaye is an expressive string syntax to Array/Object and Vice-Versa parser for Javascript. Quite often you want your users to define some values using an **expressive string expression** instead of nesting values in an **array** or **object**.\n\n> Want to build production ready apps with joy similar to ROR and Laravel. Try [AdonisJs](http://adonisjs.com/) an opinionated MVC framework for Node.js.\n\nExpressive strings are great for Humans but not for machines/programs. Using `haye` you can convert them to machine readable objects/arrays.\n\n\n## Expressions\n\nTheir are 2 types of string expressions `haye` will parse and return an array or object (based on your preference). \n\n### Pipe Expression\n\nThe pipe expression is quite popular by [Laravel](https://laravel.com/docs/validation) validation engine and also adopted by [Indicative](http://indicative.adonisjs.com/) a validation engine for Node.js\n\n#### Pipe To Array\n```javascript\nconst haye = require('haye')\n\nconst expression = 'required|min:10|max:20'\nconst parsedExp = haye.fromPipe(expression).toArray()\n```\n\nReturns \n\n```javascript\n[\n  {\n    name: 'required',\n    args: null\n  }, {\n    name: 'min',\n    args: '10'\n  }, {\n    name: 'max',\n    args: '20'\n  }\n]\n```\n\n#### Pipe To JSON\n\nAlso you can change the output format from an array to an object.\n\n\n```javascript\nconst haye = require('haye')\n\nconst expression = 'required|min:10|max:20'\nconst parsedExp = haye.fromPipe(expression).toJSON()\n```\n\nReturns\n\n```javascript\n{\n  required: null,\n  min: '10',\n  max: '20'\n}\n```\n\n#### How about multiple values next to key?\n\n```javascript\nconst haye = require('haye')\n\nconst expression = 'ranger:10,20'\nconst parsedExp = haye.fromPipe(expression).toArray()\n```\n\nReturns\n\n```javascript\n[{\n  name: 'range',\n  args: ['10', '20']\n}]\n```\n\nThe `toJSON` method on the same expression will return\n\n```javascript\n{\n  range: ['10', '20']\n}\n```\n\n### QS Expression\nThe reason I call it a `QS` expression, since it is quite similar to the query string instead you use `,` as a seperator instea of `&`.\n\n#### QS To Array\n\n```javascript\nconst haye = require('haye')\n\nconst expression = 'username=virk,firstname=harminder,lastname=virk'\nconst parsedExp = haye.fromQS(expression).toArray()\n```\n\nReturns \n\n```javascript\n[\n  {\n    name: 'username',\n    args: 'virk'\n  }, {\n    name: 'firstname',\n    args: 'harminder'\n  }, {\n    name: 'lastname',\n    args: 'virk'\n  }\n]\n```\n\n#### QS To JSON\n\nOfcourse you can get values back to a flat Object too.\n\n```javascript\nconst haye = require('haye')\n\nconst expression = 'username=virk,firstname=harminder,lastname=virk'\nconst parsedExp = haye.fromQS(expression).toJSON()\n```\n\nReturns \n\n```javascript\n{\n  username: 'virk',\n  firstname: 'harminder',\n  lastname: 'virk'\n}\n```\n\n#### Multiple Values\nYou can also define multiple values and they will be returned back as array.\n\n```javascript\nconst haye = require('haye')\n\nconst expression = 'username=virk,likes=[javascript,ruby,haskell]'\nconst parsedExp = haye.fromQS(expression).toArray()\n```\n\nReturns \n\n```javascript\n[\n  {\n    name: 'username',\n    args: 'virk'\n  }, {\n    name: 'likes',\n    args: ['javascript', 'ruby', 'haskell']\n  }\n]\n```\n\nAnd `toJSON` will return a flat object with likes as an array.\n\n```javascript\n{\n  username: 'virk',\n  likes: ['javascriot', 'ruby', 'haskell']\n}\n```\n\n## Values To Expression (VICE-VERSA)\n\nAlso you can convert your arrays and objects back to `pipe` or `QS` expression.\n\n### Pipe Expression\n\n#### Array To Pipe\n\n```javascript\nconst haye = require('haye')\nconst rules = [\n  {\n    name: 'min',\n    args: 4\n  }, {\n    name: 'max',\n    args: 10\n  }\n]\n\nhaye.fromArray(rules).toPipe()\n```\n\nReturns\n\n```\n'min:4|max:10'\n```\n\n#### JSON To Pipe\n\n```javascript\nconst haye = require('haye')\nconst rules = {\n  min: 4,\n  max:10\n}\n\nhaye.fromJSON(rules).toPipe()\n```\n\nReturns\n\n```\n'min:4|max:10'\n```\n\n### QS Expression\n\nJust like the pipe expression, you can convert your arrays and objects to QS expression too.\n\n#### Array To QS\n\n```javascript\nconst haye = require('haye')\nconst user = [\n  {\n    name: 'username',\n    args: 'virk'\n  }, {\n    name: 'likes',\n    args: ['js', 'ruby']\n  }\n]\n\nhaye.fromArray(rules).toQS()\n```\n\nReturns\n\n```\nusername=virk,likes=[js,ruby]\n```\n\n#### JSON To QS\n\n```javascript\nconst haye = require('haye')\nconst user = {\n  username: 'virk',\n  likes: ['js', 'ruby']\n}\n\nhaye.fromJSON(rules).toQS()\n```\n\nReturns\n\n```\nusername=virk,likes=[js,ruby]\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/poppinss/haye.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha test",
    "lint": "standard",
    "test": "istanbul cover _mocha --report lcovonly -- -R spec test && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"
  },
  "version": "1.0.1"
}
