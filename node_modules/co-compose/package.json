{
  "_args": [
    [
      {
        "raw": "co-compose@^1.0.0",
        "scope": null,
        "escapedName": "co-compose",
        "name": "co-compose",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/brenda/Proyecto_PedidosReservaciones/node_modules/adonis-websocket"
    ]
  ],
  "_from": "co-compose@>=1.0.0 <2.0.0",
  "_id": "co-compose@1.0.0",
  "_inCache": true,
  "_location": "/co-compose",
  "_nodeVersion": "6.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/co-compose-1.0.0.tgz_1480140057581_0.5905120417010039"
  },
  "_npmUser": {
    "name": "adonisjs",
    "email": "virk@adonisjs.com"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "co-compose@^1.0.0",
    "scope": null,
    "escapedName": "co-compose",
    "name": "co-compose",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/adonis-websocket"
  ],
  "_resolved": "https://registry.npmjs.org/co-compose/-/co-compose-1.0.0.tgz",
  "_shasum": "7f5ae1f2a4498dd6cf9bdbbaeb2d6e06b47bd85d",
  "_shrinkwrap": null,
  "_spec": "co-compose@^1.0.0",
  "_where": "/home/brenda/Proyecto_PedidosReservaciones/node_modules/adonis-websocket",
  "author": {
    "name": "amanvirk,adonisjs"
  },
  "bugs": {
    "url": "https://github.com/poppinss/co-compose/issues"
  },
  "dependencies": {
    "co": "^4.6.0",
    "lodash": "^4.17.2"
  },
  "description": "Adonis and koa style middleware layer with ability to run parallel middleware",
  "devDependencies": {
    "chai": "^3.5.0",
    "co-mocha": "^1.1.3",
    "istanbul": "^0.4.5",
    "mocha": "^3.2.0"
  },
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "dist": {
    "shasum": "7f5ae1f2a4498dd6cf9bdbbaeb2d6e06b47bd85d",
    "tarball": "https://registry.npmjs.org/co-compose/-/co-compose-1.0.0.tgz"
  },
  "gitHead": "09cf8dda3ab350541bca877784381c2ca8ba4e16",
  "homepage": "https://github.com/poppinss/co-compose#readme",
  "keywords": [
    "adonisjs",
    "koa",
    "middleware",
    "co",
    "co-middleware"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "adonisjs",
      "email": "virk@adonisjs.com"
    }
  ],
  "name": "co-compose",
  "optionalDependencies": {},
  "readme": "# Co Compose\n\n[Koa](http://koajs.com/) and [AdonisJs](http://adonisjs.com/) style middleware are super neat since they allow you to create a chain of **ES2015** generators and write maintainable async code.\n\n**Co compose** makes it easier for you to add the support for same style of middleware inside your applications. It features:\n\n1. Run middleware in sequence.\n2. Pass custom `context (this)` to middleware functions.\n3. Pass arguments to middleware functions.\n4. Parallely execute middleware by wrapping them inside a pipeline.\n5. Store middleware inside a middleware and tag them for later use.\n\n## Basic Example\n\n```javascript\nconst co = require('co')\nconst Middleware = require('co-compose')\nconst middleware = new Middleware()\n\nconst chain = []\n\nconst fn1 * (next) {\n  chain.push('fn1')\n  yield next\n}\n\nconst fn2 * (next) {\n  chain.push('fn2')\n  yield next\n}\n\nconst fn3 * (next) {\n  chain.push('fn3')\n  yield next\n}\n\n// Compose middleware\nconst composedMiddleware = middleware.compose([fn1, fn2, fn3])\n\nco(function * () {\n  yield composedMiddleware()\n}).then(() => {\n  assert.deepEqual(chain, ['fn1', 'fn2', 'fn3'])\n})\n```\n\n## Passing Custom Params\nQuite often you will be required to pass custom parameters to all the middleware functions. Same can be done using `withParams` method.\n\n```javascript\nconst co = require('co')\nconst Middleware = require('co-compose')\nconst middleware = new Middleware()\n\nconst fn1 * (hash, next) {\n  hash.fn1 = true\n  chain.push('fn1')\n  yield next\n}\n\nconst fn2 * (hash, next) {\n  hash.fn2 = true\n  chain.push('fn2')\n  yield next\n}\n\nconst fn3 * (hash, next) {\n  hash.fn3 = true\n  chain.push('fn3')\n  yield next\n}\n\n// Compose middleware with params\nconst hash = {}\nconst composedMiddleware = middleware\n  .withParams(hash)\n  .compose([fn1, fn2, fn3])\n\nco(function * () {\n  yield composedMiddleware()\n}).then(() => {\n  assert.deepEqual(hash, {fn1: true, fn2: true, fn3: true})\n})\n```\n\n## Transform Functions On Fly\nAt times middleware are not plain functions. For example: [AdonisJs Middleware](http://adonisjs.com/docs/3.1/middleware#_creating_a_middleware) is a fully qualified **ES2015** class and it's instance should be created on fly.\n\n```javascript\nconst co = require('co')\nconst Middleware = require('co-compose')\nconst middleware = new Middleware()\n\nclass Foo {\n\n  * handle (req, res, next) {\n    yield next\n  }\n\n}\n\nclass Bar {\n\n  * handle (res, res, next) {\n    yield next\n  }\n\n}\n\nconst req = {}\nconst res = {}\n\nconst composedMiddleware = middleware\n  .resolve((M, params) => {\n    const middlewareInstance = new M()\n    return middlewareInstance.handle.apply(middlewareInstance, params)\n  })\n  .withParams(req, res)\n  .compose([Foo, Bar])\n```\n\n## Using Middleware Store\nApart from composing middleware, you can also store middleware that can be referenced/composed later.\n\n```javascript\nconst Middleware = require('co-compose')\nconst middleware = new Middleware()\n\nconst fn1 * (req, res, next) {\n  yield next\n}\n\nconst fn2 * (req, res, next) {\n  yield next\n}\n\n\n// register\nmiddleware.register([fn1, fn2])\n\n// and later compose\nmiddleware.withParams(req, res).compose()\n```\n\n## Tag middleware\nIf your application makes use of middleware at different places, it will be a nice to tag middleware when storing them. For example: Storing middleware for HTTP requests and for Websockets requests\n\n```javascript\nconst Middleware = require('co-compose')\nconst middleware = new Middleware()\n\nmiddleware.tag('http').register([fn1, fn2])\nmiddleware.tag('ws').register([ws1, ws2])\n\nmiddleware.tag('http').compose()\nmiddleware.tag('ws').compose()\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/poppinss/co-compose.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha test",
    "test": "_mocha test"
  },
  "version": "1.0.0"
}
